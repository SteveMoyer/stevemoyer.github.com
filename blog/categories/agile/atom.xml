<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Coding Libetartian]]></title>
  <link href="http://blog.stevemoyer.net/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://blog.stevemoyer.net/"/>
  <updated>2013-03-14T11:53:41-07:00</updated>
  <id>http://blog.stevemoyer.net/</id>
  <author>
    <name><![CDATA[Steve Moyer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Feature Toggles for .net: nToggle]]></title>
    <link href="http://blog.stevemoyer.net/2011/03/05/feature-toggles-for-net-ntoggle.html"/>
    <updated>2011-03-05T15:05:00-08:00</updated>
    <id>http://blog.stevemoyer.net/2011/03/05/feature-toggles-for-net-ntoggle</id>
    <content type="html"><![CDATA[<div class='post'>
Late last year my team and I helped a client to decide against <a href="http://martinfowler.com/bliki/FeatureBranch.html">Feature Branching</a> in favor of <a href="http://martinfowler.com/bliki/FeatureToggle.html">Feature Toggles</a>.  After making this decision we realized that there didn't seem to be an implementation available for the .net platform so <a href="https://github.com/SteveMoyer/nToggle">nToggle</a> was born.  Usage is simple and there isn't a whole lot to it.<br/>
<br/>
Let's suppose we have a new feature, BlogComments, that we want to toggle. 
Configure your new toggle as on or off in the project's Web.config file.
<br/>
<script type="syntaxhighlighter" class="brush: xml">&lt;![CDATA[  
<configuration>
  <appSettings>
 <add key="BlogComments" value="False"/>
  </appSettings>
 ...
</configuration>
]]&gt;</script>
<br/>
<br/>
Add a WebFeatureToggle around the new feature in  Asp.net WebForms.

<script type="syntaxhighlighter" class="brush: html">&lt;![CDATA[  
<%@ Register assembly="nToggle" namespace="nToggle" tagprefix="nToggle" %>
<nToggle:WebFeatureToggle ID="WebFeatureToggle1" EnabledBy="BlogComments" runat="server" >
 <span id="enabledby">Blog Comments implementation goes here</span>
</nToggle:WebFeatureToggle>
]]&gt;</script>
<br/>
If you have Web Form elements which should not show up when the feature is enabled you can toggle them too using the RemovedBy attribute
<script type="syntaxhighlighter" class="brush: html">&lt;![CDATA[  
<%@ Register assembly="nToggle" namespace="nToggle" tagprefix="nToggle" %>
<nToggle:WebFeatureToggle ID="WebFeatureToggle2" RemovedBy="BlogComments"  runat="server" >
 <span id="removedby">Old feature replaced by Blog Comments</span>
</nToggle:WebFeatureToggle>
]]&gt;</script>
<br/>

Code in a code behind that should be toggled can use the WebFeatureToggle as well.
<script type="syntaxhighlighter" class="brush: csharp">&lt;![CDATA[  
protected void Page_Load(object sender, EventArgs e)
  {
   WebFeatureToggle1.RunActionWhenDisabled(CodeToRunIfDisabled);
   WebFeatureToggle1.RunActionWhenEnabled(CodeToRunIfEnabled);
  }
  protected void CodeToRunIfDisabled()
  {
  //your code
  }
  protected void CodeToRunIfEnabled()
  {
  //your code
  }
]]&gt;</script>
<br/></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Emacs and Clojure]]></title>
    <link href="http://blog.stevemoyer.net/2010/08/06/learning-emacs-and-clojure.html"/>
    <updated>2010-08-06T00:36:00-07:00</updated>
    <id>http://blog.stevemoyer.net/2010/08/06/learning-emacs-and-clojure</id>
    <content type="html"><![CDATA[<div class='post'>
<div xmlns='http://www.w3.org/1999/xhtml'><p>I've recently embarked on a journey to learn both Emacs and Clojure (on Ubuntu). I've made some progress learning the basics of clojure and the basics of emacs but I've struggled with getting a development flow going. </p><p>I'm going to try and document what I've learned and am learning. I'd appreciate any helpful hints, tips, or comments that people have. <strong> While writing this post I stumbled on </strong><a href='http://lifeofaprogrammergeek.blogspot.com/2009/03/learning-clojure-and-emacs.html'><strong>Curran's blog</strong></a><strong> which has most of what I wanted to capture and </strong><a href='http://lifeofaprogrammergeek.blogspot.com/2008/06/hello.htmlblogspot.com/'><strong>a lot more</strong></a><strong>.  </strong></p><p><strong>Emacs Installation</strong></p><p>I'm not sure it's the best way to do it but I installed emacs 23 from the from the ubuntu package manager and followed Bradford Cross's emacs <a href='http://measuringmeasures.blogspot.com/2010/01/my-new-clojure-emacs-setup.html'>setup steps</a>.</p><p>I recently watched this <a href='http://www.vimeo.com/1013263'>screencast</a> by Stuart Halloway (thanks to <a href='http://twitter.com/timwee'>Tim Wee</a>) and enabled ido.el by following the instructions on <a href='http://www.emacswiki.org/emacs/InteractivelyDoThings'>emacswiki</a>. I strongly prefer the file selection with ido.el to the default behavior.</p><p><strong>Clojure installation</strong></p><p>I also started off installing clojure from the package manager as well but I soon started using the <a title='lein' href='http://github.com/technomancy/leiningen'>leiningen</a> build tool for clojure. Leinigen makes things pretty easy and manages your dependencies and classpath.</p><p><strong>Using Leiningen</strong></p><p>(With the lein file in the current directory or on the path</p><p>Starting a new project:</p><p><em>lein new &lt;project name&gt;</em></p><p><em>cp lein &lt;projectname&gt;/</em></p><p><em>cd </em><em>&lt;projectname&gt;/</em></p><p>Download Dependencies:</p><p><em>lein deps</em></p><p>start a repl for the project:</p><p><em>lein repl</em></p><p>starting a swank server:</p><p><em>lein swank</em></p><p/><p><strong>TDD Flow</strong></p><p>I've only recently started to get any flow when coding. I'm hoping people can give me some tips to make this more effective.</p><p>To get set up I run through a set of steps</p><ol><li>Open a terminal window and start emacs in the terminal. </li><li>Open another terminal tab(ctrl-shift-t) and navigate to the project directory.</li><li>If the project is not new skip to step 6.</li><li>Add the following to the generated project.clj file to enable lein swank:<br/>:dev-dependencies [<br/>[swank-clojure "1.1.0"]<br/>[leiningen/lein-swank "1.1.0"]<br/>]</li><li>Run <code><em>lein deps</em></code> to download dependencies</li><li>Run <em>lein swank</em> to start the swank server</li><li>Switch back to the emacs tab (ctrl-page up)</li><li>I have a widescreen monitor rotated to profile so I normally split screen horizontally (C-x, 2)</li><li>Start the swank server in one window (M-x slime-connect)</li><li>Switch to the other window (C-x, o)</li><li>Open clojure test file (C-x, C-f, select file)</li><li>Add/edit test</li><li>Save test file (C-x, C-s)</li><li>"Load the file" to update the state of the repl (C-c, C-l)</li><li>Switch to the slime repl (C-x, o to switch to the other window)</li><li>Make test fail by executing the unit tests in the repl: (clojure.test/run-tests 'sample.namespace-of-tests) or to run all tests: (clojure.test/run-all-tests)</li><li>Implement code to make test pass. </li><li>Run tests and watch them pass</li></ol><p/></div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroSoft's Total Failure System (MS TFS)]]></title>
    <link href="http://blog.stevemoyer.net/2010/07/21/microsofts-total-failure-system-ms-tfs.html"/>
    <updated>2010-07-21T16:36:00-07:00</updated>
    <id>http://blog.stevemoyer.net/2010/07/21/microsofts-total-failure-system-ms-tfs</id>
    <content type="html"><![CDATA[<div class='post'>
<div xmlns="http://www.w3.org/1999/xhtml">Let me apologize in advance for my exasperation,  I've been working with TFS.
<br/>
My coworker Jonathan McCracken was too nice to MS Team Foundation System in his <a href="http://jonathanmccracken.blogspot.com/2010/07/mvp-microsoftfanboy.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+MyIdeationHasFoundAHome+%28My+Ideation+Has+Found+a+Home%29">MVP != MicrosoftFanBoy post</a>.  Microsoft will tout that all of the tools are integrated.  I would argue that each of the "integrated" tools are pretty close to worst in their class.  I enjoy c# as a language but in general I want to use Visual Studio with ReSharper and then get as far away from the other MS tools as possible.  Disclaimer: I haven't used TFS 2010 but in my experience when something is this bad it may get a bit better but rarely will be completely transformed.
<br/><br/>
<big><big><b>Version Control</b>
</big></big><br/>
<br/>I agree with Jonathan's assessment that Subversion is a better choice for source control than Team Foundation Version Control(TFVC). I think SVN the gap is quite wide.  Let's say we want to use TFS for builds and project management but use SVN (or anything else) for version control.  To the best of my knowledge there is no way to integrate any other version control system with Team Build.
<br/><br/>
Better Choices:  SVN, Git, and Hg.  All of which are free and open source.
<br/><br/>
<big><big><b>Builds</b></big></big>
<br/><br/>
<b>Build Configuration</b><br/>
Let's look at Team Build (appropriately abbreviated TB).  Of course
to use TB we need to be using TFVC so we'll assume we've made the
mistake of accepting that.
<br/><br/>
TB requires you to name your build file TFSBuild.proj.  Upon kicking off a build it downloads the TFSBuild.proj file and rest of that folder's contents to a folder(BuildType) that is nested one level less deep than it's location in source control (TeamBuildTypes/MyBuildType).  Not a particularly big deal since the rest of my project won't be downloaded until after it attempts to load the .proj file.  Say you wanted to have some shared targets between multiple builds: So far as I can tell, you can't do it.  Your .proj file will only be able to use files in it's folder and we've already established that there can only be one project per build folder because it forces it to be named TFSBuild.proj.  All I want is for the build files to be co-located with the project and be flexible.
<br/><br/>
<b>
Build Status</b><br/>
I want every team member to be aware of the status of all builds that are relevant to them. TB is integrated with Visual Studio but the interface is awful.  There doesn't seem to be an easy way to see the current status of each build type without having to dig through a list of all builds by date.
<br/><br/>
Build radiators such as a flat screen showing build status or red/green build light are great to have but unless everyone is consistently in view of them we  probably need a tray icon as well.  The only tray icon I could find would show green any time a build was running.  If you have 9 broken builds and one that was in the process of building the icon would show green!
<br/><br/>
When a build fails on TB I almost always have to dig into a raw log to find the details as TB seems to have no intention of giving me the relevant information. Part of this is probably due to that fact that many of the unit tests were NUnit tests.
<br/><br/>
<b>Local Builds</b>
<br/>
In the past while using NAnt running a build before check-in on a developer machine has been a piece of cake.  With TB 2010 I've heard that the option is to shelve some changes and then queue up a private build.  This is still more complicated than just kicking of a build at the command line and will not work at all if disconnected.  Rather than embracing NAnt and NUnit and making sure they we're integrated they instead created MSBuild and MSTest to kill off NAnt and NUnit.
<br/><br/>
Better free/open source choices:  Hudson, CC.net(when I last used it in 2005 probably more so now.)<br/>
Better Paid options:  Team City(free for small projects), Go(formerly Cruise)
<br/><br/>
<big><big><b>Project Management</b></big></big>
<br/><br/>
I have minimal experience using the project management part of the suite.  This is due to the fact that almost all of the clients I've worked with have chosen not to use it, even those who seem to blindly take whatever MS gives them.
<br/><br/>
Better Free Choices:  Anyone have suggestions here???<br/>
Better Paid Choices:  Mingle, Version One(last touched in 2005)
<br/><br/>
<span style="font-size:130%;"><b>Question </b></span><br/>
What would your preferred tool set be if you were starting a .net project today?
<br/>
Considerations: scalable to a large enterprise, easy to use, easy to integrate, easy to maintain,cost
<br/><br/>
My default toolset would look something like:<br/>
Source Control: SVN or Git if the team is distributed<br/>
Development Environment: Visual Studio w/ ReSharper<br/>
Continuous Integration Server: Team City(free for small teams),  Hudson for larger teams or organizations<br/>
Build Scripting: NAnt<br/>
Unit Testing: NUnit<br/>
Project Management: Mingle(free for small projects),  ?? for larger projects<br/>
<br/>
Other than Visual Studio and ReSharper I've avoided anything with a price tag.  There are paid tools that I might prefer but for my default I don't want anyone to be able to kill the setup based on budget.
<br/><br/>
I can have most of this set up on my local box in about 30 minutes or set up on a server for the team in a couple hours.
</div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My QA Value Proposition]]></title>
    <link href="http://blog.stevemoyer.net/2010/04/06/my-qa-value-proposition.html"/>
    <updated>2010-04-06T00:13:00-07:00</updated>
    <id>http://blog.stevemoyer.net/2010/04/06/my-qa-value-proposition</id>
    <content type="html"><![CDATA[<div class='post'>
I've heard and observed that Quality Analysts/ Quality Engineer's(QA for the purposes of this post) are often valued a lot less than other members of software development teams.  Here are some of the reasons I've heard in support of this view:<br/>

<ul><li>Following a script and clicking through a website is easy, anyone can do it.
</li><li>We test so we don't need someone else to do it.</li><li>They never find any real bugs.</li><li>We'd rather just have another developer.
</li></ul>
<br/>
I don't agree with the perspective so I thought I'd lay out what I think the QA value proposition is.<br/><br/>

While the entire team must take ownership of the quality of application, the QA's are the shepherds of that quality.  If you are simply tossing an untested application over the wall at QA, they will be scrambling(usually ineffectively) to clean up your mess.  To be effective, QA's should be full fledged members of your team, co-located with your team, testing in-phase with your team.<br/><br/>

While QA's perform a good amount of manual testing they also help create smoke tests, help determine acceptance criteria, help write acceptance tests, and monitor performance testing.
<br/><br/>
While QA's may follow some test scripts, they also monitor browser compatibility, find creative ways to break the application, and have keen attention to detail.  They are also able to step back and notice things that escape your eye after viewing the functionality in your story for the thousandth time that day.
<br/><br/>
Good QA's help expose defects, find work-arounds, and help the business to prioritize them.  They monitor, minimize, and mitigate the differences between other environments and production.
<br/><br/>
While it's certainly possibly to successfully develop quality applications without formal "QA", having good QA's around makes it much easier.  I think they are every bit as valuable as other members of the team.
<br/><br/>
When people don't see much value in QA's, I generally think they haven't worked with a good QA or have only worked in environments which make all but the most basic QA work impossible (i.e. "After 6 months, here is our first testable release. We have to be in production in a week.  Good luck.").
<br/><br/>
I'm sure I've left out many other things.  How else do QA's provide value to projects?</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consulting Engagement Success Indicators]]></title>
    <link href="http://blog.stevemoyer.net/2010/03/29/consulting-engagement-success.html"/>
    <updated>2010-03-29T23:05:00-07:00</updated>
    <id>http://blog.stevemoyer.net/2010/03/29/consulting-engagement-success</id>
    <content type="html"><![CDATA[<div class='post'>
<div xmlns='http://www.w3.org/1999/xhtml'>Whenever I roll on to a new client there are a few things that I find to be leading indicators for the success of the engagement.<br/><ul><li>How long it takes to get a badge/computer/access to the building.  Hopefully this stuff is ready and waiting when you arrive. I have seen cases where a badge takes a few weeks and a computer takes up to two months.  It's particularly awesome if they won't provide you with a computer and won't allow your computer on their network.  If I don't have all of this stuff by the end of the first week on the client it's a bad sign.    <br/></li><li>The amount of time it takes before I hear the first mention of filing a ticket.  Something like "Here is your laptop, if you want a mouse or keyboard file a separate ticket for each and we'll get them for you."  I've really come to hate the words "file a ticket", particularly when preceded by "I forgot to" and followed by "so that won't be ready for a few weeks."</li><li>Availability of client personnel.  If the people I'm supposed to be working with are MIA or are splitting time with a bunch of other projects I lose a bit of confidence.  <br/></li></ul>I used to have a few more which seem to have slipped my mind.  Do you have any other early indicators for project/engagement success or failure? <br/> <br/></div></div>



]]></content>
  </entry>
  
</feed>
